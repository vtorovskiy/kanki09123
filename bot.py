import telebot
from telebot import types
import os
import sys
import logging
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
from telebot import custom_filters
from food_recognition.aitunnel_adapter import AITunnelNutritionAdapter
from database.db_manager import DatabaseManager, Session, get_db_session
from database.models import User, FoodAnalysis
from datetime import datetime, timedelta, date
from utils.helpers import get_nutrition_indicators
from database.models import User, FoodAnalysis, UserSubscription
from monitoring.metrics import metrics_collector
from monitoring.decorators import track_command, track_api_call, track_user_action
import time
from config import PAYMENT_PROVIDER_TOKEN, SUBSCRIPTION_COST
import traceback
import json
import re
from sqlalchemy import func
import threading
import gc
import psutil


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from config import TELEGRAM_BOT_TOKEN, SUBSCRIPTION_COST, FREE_REQUESTS_LIMIT
from database.db_manager import DatabaseManager
from food_recognition.vision_api import FoodRecognition
from food_recognition.nutrition_calc import NutritionCalculator
from payments.yukassa import YuKassaPayment
from utils.helpers import (
    download_photo, format_nutrition_result, get_subscription_info,
    format_datetime, get_remaining_subscription_days
)

# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: UTC+3
TIMEZONE_OFFSET = 3  # –ß–∞—Å—ã

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏
ADMIN_IDS = [931190875]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
USER_DATA_CLEANUP_INTERVAL = 1800  # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –æ—á–∏—Å—Ç–∫–∞–º–∏
USER_DATA_MAX_AGE = 7200           # 2 —á–∞—Å–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
USER_DATA_MAX_SIZE = 10000         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
state_storage = StateMemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN, state_storage=state_storage)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class BotStates(StatesGroup):
    waiting_for_food_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
    waiting_for_portion_size = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_weight = State()
    waiting_for_height = State()
    waiting_for_activity = State()
    waiting_for_goal = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}
user_stats_dates = {}
notification_cache = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
food_recognition = FoodRecognition()
aitunnel_adapter = AITunnelNutritionAdapter()


def update_user_activity(user_id):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í—ã–∑—ã–≤–∞—Ç—å –≤ –∫–∞–∂–¥–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['last_activity'] = time.time()


def get_memory_usage_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏"""
    try:
        process = psutil.Process(os.getpid())
        memory_mb = process.memory_info().rss / 1024 / 1024

        return {
            'memory_mb': round(memory_mb, 1),
            'user_data_count': len(user_data),
            'estimated_user_data_mb': round(len(user_data) * 0.1, 1)
        }
    except:
        return {
            'memory_mb': 'N/A',
            'user_data_count': len(user_data),
            'estimated_user_data_mb': round(len(user_data) * 0.1, 1)
        }


def cleanup_user_data():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ user_data –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è memory leak
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    """
    while True:
        try:
            time.sleep(USER_DATA_CLEANUP_INTERVAL)

            current_time = time.time()
            cleanup_count = 0
            total_users_before = len(user_data)

            logger.info(f"üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ user_data. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {total_users_before}")

            # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            users_to_remove = []

            for user_id in list(user_data.keys()):
                try:
                    user_info = user_data[user_id]

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    last_activity = user_info.get('last_activity', 0)

                    # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ 2 —á–∞—Å–æ–≤
                    if current_time - last_activity > USER_DATA_MAX_AGE:
                        users_to_remove.append(user_id)
                        cleanup_count += 1
                        continue

                    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    keys_to_remove = []
                    for key in user_info.keys():
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        if key.startswith('temp_') or key.startswith('added_to_stats_'):
                            keys_to_remove.append(key)
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ food_data (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        elif key == 'food_data' and isinstance(user_info.get('food_data'), dict):
                            food_data = user_info['food_data']
                            if 'timestamp' in food_data:
                                food_timestamp = food_data.get('timestamp', 0)
                                if current_time - food_timestamp > 3600:  # 1 —á–∞—Å
                                    keys_to_remove.append(key)

                    # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏
                    for key in keys_to_remove:
                        user_info.pop(key, None)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
                    users_to_remove.append(user_id)

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Å–ø–∏—Å–∫–∞
            for user_id in users_to_remove:
                user_data.pop(user_id, None)

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if len(user_data) > USER_DATA_MAX_SIZE:
                logger.warning(f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {len(user_data)}")

                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —É–¥–∞–ª—è–µ–º —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö
                sorted_users = sorted(
                    user_data.items(),
                    key=lambda x: x[1].get('last_activity', 0)
                )

                # –£–¥–∞–ª—è–µ–º 20% —Å–∞–º—ã—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
                users_to_force_remove = int(len(sorted_users) * 0.2)
                for i in range(users_to_force_remove):
                    user_id = sorted_users[i][0]
                    user_data.pop(user_id, None)
                    cleanup_count += 1

                logger.info(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–æ {users_to_force_remove} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            total_users_after = len(user_data)
            memory_saved_mb = (cleanup_count * 0.1)

            logger.info(
                f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
                f"–ë—ã–ª–æ: {total_users_before}, —Å—Ç–∞–ª–æ: {total_users_after}, "
                f"—É–¥–∞–ª–µ–Ω–æ: {cleanup_count}, –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: ~{memory_saved_mb:.1f}MB"
            )

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
            gc.collect()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –æ—á–∏—Å—Ç–∫–∞ –±—ã–ª–∞ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π
            if cleanup_count > 100:
                try:
                    bot.send_message(
                        931190875,  # Admin ID
                        f"üßπ SnapEat: –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏\n"
                        f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {cleanup_count}\n"
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {total_users_after}\n"
                        f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: ~{memory_saved_mb:.1f}MB"
                    )
                except:
                    pass

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ cleanup_user_data: {str(e)}")


def cleanup_expired_subscriptions():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    """
    global notification_cache

    try:
        with get_db_session() as session:
            # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
            now_msk = datetime.utcnow() + timedelta(hours=3)

            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            expired_subscriptions = session.query(UserSubscription).filter(
                UserSubscription.is_active == True,
                UserSubscription.end_date <= now_msk
            ).all()

            if not expired_subscriptions:
                return  # –ù–µ—Ç –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫

            count = 0

            # –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
            for subscription in expired_subscriptions:
                subscription.is_active = False
                count += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
            session.commit()
            logger.info(f"üîß –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")

            # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞)
            notifications_sent = 0
            current_time = time.time()

            for subscription in expired_subscriptions:
                try:
                    user = session.query(User).filter_by(id=subscription.user_id).first()
                    if user:
                        user_id = user.telegram_id

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ
                        last_notification = notification_cache.get(user_id, 0)

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 23 —á–∞—Å–æ–≤
                        if current_time - last_notification > 82800:  # 23 —á–∞—Å–∞

                            markup = InlineKeyboardMarkup()
                            markup.add(InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))

                            bot.send_message(
                                user_id,
                                "‚è∞ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!",
                                reply_markup=markup
                            )

                            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                            notification_cache[user_id] = current_time
                            notifications_sent += 1

                        else:
                            logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {user_id}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {subscription.user_id}: {e}")

            if notifications_sent > 0:
                logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {notifications_sent} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏")

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ (—Å—Ç–∞—Ä—à–µ 48 —á–∞—Å–æ–≤)
            notification_cache = {
                uid: timestamp
                for uid, timestamp in notification_cache.items()
                if current_time - timestamp < 172800  # 48 —á–∞—Å–æ–≤
            }

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ cleanup_expired_subscriptions: {e}")


def start_cleanup():
    """
    –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    """

    def cleanup_worker():
        while True:
            try:
                cleanup_expired_subscriptions()
                time.sleep(600)  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ cleanup_worker: {e}")
                time.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É

    cleanup_thread = threading.Thread(target=cleanup_worker, daemon=True)
    cleanup_thread.start()
    logger.info("üîß –ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
@track_command('start')
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    DatabaseManager.get_or_create_user(user_id, username, first_name, last_name)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name or username or '–¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
        f"–Ø SnapEat ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ë–ñ–£ –±–ª—é–¥.\n"
        f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –µ–¥—ã, –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º.\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    is_subscribed = DatabaseManager.check_subscription_status(user_id)
    remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
    
    if not is_subscribed:
        welcome_text += f"üî∏ –î–æ—Å—Ç—É–ø–Ω–æ {remaining_requests} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤\n"
    else:
        welcome_text += "‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"
    
    # –ö–Ω–æ–ø–∫–∏ (–∏–∑–º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫)
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="setup_profile"))
    
    if not is_subscribed:
        markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
    
    # –ü—É—Ç—å –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    welcome_image_path = os.path.join(os.path.dirname(__file__), 'static', 'start_photo.jpg')
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        with open(welcome_image_path, 'rb') as photo:
            bot.send_photo(
                message.chat.id, 
                photo, 
                caption=welcome_text, 
                parse_mode="Markdown", 
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        bot.send_message(message.chat.id, welcome_text, parse_mode="Markdown", reply_markup=markup)


@bot.message_handler(commands=['metrics'])
@track_command('metrics')
def metrics_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /metrics –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if user_id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º –∏–∑ —Ñ–∞–π–ª–∞
        metrics_summary = metrics_collector.get_metrics_summary()

        # –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
        if 'start_time' in metrics_summary and metrics_summary['start_time']:
            try:
                start_time = datetime.fromisoformat(metrics_summary['start_time'])
                uptime_seconds = (datetime.now() - start_time).total_seconds()
                uptime_hours = uptime_seconds / 3600
                uptime_str = f"{uptime_hours:.1f} —á–∞—Å–æ–≤"
            except:
                uptime_str = metrics_summary.get('uptime', 'N/A')
        else:
            uptime_str = metrics_summary.get('uptime', 'N/A')

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        session = Session()
        try:
            # –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            real_users_count = session.query(User).count()

            # –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤
            real_analyses_count = session.query(FoodAnalysis).count()

            # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            active_subs = session.query(UserSubscription).filter(
                UserSubscription.is_active == True,
                UserSubscription.end_date > datetime.utcnow()
            ).count()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            last_24h = datetime.utcnow() - timedelta(hours=24)
            analyses_24h = session.query(FoodAnalysis).filter(
                FoodAnalysis.analysis_date >= last_24h
            ).count()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è –∏–∑ –º–µ—Ç—Ä–∏–∫
            photo_analyses = metrics_summary.get('photo_analyses', 0)
            voice_analyses = metrics_summary.get('voice_analyses', 0)
            text_analyses = metrics_summary.get('text_analyses', 0)
        finally:
            session.close()

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ë–ï–ó Markdown
        main_metrics = (
            "üìä –°–í–û–î–ö–ê –ü–û –ú–ï–¢–†–ò–ö–ê–ú\n\n"
            f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_str}\n"
            f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: {metrics_summary.get('restart_count', 0)}\n\n"
            "–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –ò –ê–ö–¢–ò–í–ù–û–°–¢–¨:\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {real_users_count}\n"
            f"üíé –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {active_subs}\n"
            f"üìä –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {real_analyses_count}\n"
            f"üìà –ê–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ 24—á: {analyses_24h}\n\n"
            "–¢–ò–ü–´ –ê–ù–ê–õ–ò–ó–û–í (–∏–∑ –º–µ—Ç—Ä–∏–∫):\n"
            f"üì∏ –§–æ—Ç–æ: {photo_analyses}\n"
            f"üé§ –ì–æ–ª–æ—Å: {voice_analyses}\n"
            f"üìù –¢–µ–∫—Å—Ç: {text_analyses}\n\n"
            "–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–†–ò–ö–ò:\n"
            f"üì° API –≤—ã–∑–æ–≤–æ–≤ –≤—Å–µ–≥–æ: {metrics_summary.get('total_api_calls', 0)}\n"
            f"‚ö†Ô∏è –û—à–∏–±–æ–∫ API: {metrics_summary.get('total_api_errors', 0)} "
            f"({metrics_summary.get('error_rate', '0%')})"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ë–ï–ó parse_mode
        bot.reply_to(message, main_metrics)

        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if metrics_summary.get('popular_commands'):
            commands_text = "–ü–û–ü–£–õ–Ø–†–ù–´–ï –ö–û–ú–ê–ù–î–´:\n"
            for cmd, count in metrics_summary.get('popular_commands', {}).items():
                commands_text += f"‚Ä¢ /{cmd}: {count}\n"

            bot.send_message(message.chat.id, commands_text)

        # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ API
        if metrics_summary.get('avg_response_times'):
            api_text = "–°–†–ï–î–ù–ï–ï –í–†–ï–ú–Ø –û–¢–í–ï–¢–ê API (—Å–µ–∫):\n"
            for api, avg_time in metrics_summary.get('avg_response_times', {}).items():
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–º—è API –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                api_name = api.replace('_', ' ').title()
                api_text += f"‚Ä¢ {api_name}: {avg_time:.3f}\n"

            bot.send_message(message.chat.id, api_text)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
        session = Session()
        try:
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            top_users = session.query(
                User.username,
                User.first_name,
                func.count(FoodAnalysis.id).label('analyses_count')
            ).join(FoodAnalysis).group_by(User.id, User.username, User.first_name).order_by(
                func.count(FoodAnalysis.id).desc()
            ).limit(5).all()

            if top_users:
                top_text = "–¢–û–ü-5 –ê–ö–¢–ò–í–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n"
                for user in top_users:
                    name = user.username or user.first_name or "–ê–Ω–æ–Ω–∏–º"
                    top_text += f"‚Ä¢ {name}: {user.analyses_count} –∞–Ω–∞–ª–∏–∑–æ–≤\n"

                bot.send_message(message.chat.id, top_text)
        finally:
            session.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {str(e)}")
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {str(e)}")


@bot.message_handler(commands=['memory'])
@track_command('memory')
def memory_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        memory_info = get_memory_usage_info()
        current_time = time.time()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        active_1h = 0
        active_24h = 0

        for uid, data in user_data.items():
            last_activity = data.get('last_activity', 0)
            if current_time - last_activity < 3600:  # 1 —á–∞—Å
                active_1h += 1
            if current_time - last_activity < 86400:  # 24 —á–∞—Å–∞
                active_24h += 1

        memory_text = (
            f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ SnapEat\n\n"
            f"üñ•Ô∏è –ü—Ä–æ—Ü–µ—Å—Å: {memory_info['memory_mb']} MB\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: {memory_info['user_data_count']}\n"
            f"üìä –û—Ü–µ–Ω–∫–∞ user_data: ~{memory_info['estimated_user_data_mb']} MB\n\n"
            f"üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
            f"‚Ä¢ –ó–∞ 1 —á–∞—Å: {active_1h}\n"
            f"‚Ä¢ –ó–∞ 24 —á–∞—Å–∞: {active_24h}\n\n"
            f"üßπ –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏:\n"
            f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {USER_DATA_CLEANUP_INTERVAL // 60} –º–∏–Ω\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {USER_DATA_MAX_AGE // 3600} —á–∞—Å\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {USER_DATA_MAX_SIZE}"
        )

        bot.reply_to(message, memory_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ memory: {str(e)}")
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏: {str(e)}")


@bot.message_handler(commands=['cleanup'])
@track_command('cleanup')
def cleanup_command(message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        users_before = len(user_data)
        current_time = time.time()
        cleanup_count = 0

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
        users_to_remove = []
        for uid, data in user_data.items():
            last_activity = data.get('last_activity', 0)
            if current_time - last_activity > 3600:  # 1 —á–∞—Å
                users_to_remove.append(uid)
                cleanup_count += 1

        for uid in users_to_remove:
            user_data.pop(uid, None)

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
        gc.collect()

        users_after = len(user_data)

        result_text = (
            f"üßπ *–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\n\n"
            f"–ë—ã–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_before}\n"
            f"–°—Ç–∞–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_after}\n"
            f"–£–¥–∞–ª–µ–Ω–æ: {cleanup_count}\n"
            f"–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ: ~{cleanup_count * 0.1:.1f} MB"
        )

        bot.reply_to(message, result_text, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ cleanup: {str(e)}")
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {str(e)}")

@bot.message_handler(commands=['reset_metrics'])
def reset_metrics_command(message):
    """–°–±—Ä–æ—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        # –°–±—Ä–æ—Å –º–µ—Ç—Ä–∏–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        metrics_collector._init_default_metrics()
        metrics_collector.save_metrics()

        bot.reply_to(message, "‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –°—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω—É–ª–µ–Ω—ã.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –º–µ—Ç—Ä–∏–∫: {str(e)}")
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['setup'])
@track_command('setup')
def setup_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = DatabaseManager.get_user_profile(user_id)

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã setup
    setup_image_path = os.path.join(os.path.dirname(__file__), 'static', 'setup.jpg')
    
    if user_profile and (user_profile.get('gender') or user_profile.get('daily_calories')):
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        profile_text = "‚öôÔ∏è *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        
        if user_profile.get('gender'):
            profile_text += f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_profile['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        if user_profile.get('age'):
            profile_text += f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_profile['age']} –ª–µ—Ç\n"
        if user_profile.get('weight'):
            profile_text += f"‚Ä¢ –í–µ—Å: {user_profile['weight']} –∫–≥\n"
        if user_profile.get('height'):
            profile_text += f"‚Ä¢ –†–æ—Å—Ç: {user_profile['height']} —Å–º\n"
        if user_profile.get('activity_level'):
            profile_text += f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_profile['activity_level']}\n"
        
        profile_text += "\n*–í–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –ö–ë–ñ–£:*\n"
        
        if user_profile.get('daily_calories'):
            profile_text += f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {user_profile['daily_calories']} –∫–∫–∞–ª\n"
        if user_profile.get('daily_proteins'):
            profile_text += f"‚Ä¢ –ë–µ–ª–∫–∏: {user_profile['daily_proteins']} –≥\n"
        if user_profile.get('daily_fats'):
            profile_text += f"‚Ä¢ –ñ–∏—Ä—ã: {user_profile['daily_fats']} –≥\n"
        if user_profile.get('daily_carbs'):
            profile_text += f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {user_profile['daily_carbs']} –≥\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(
            InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="setup_profile"),
            InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –Ω–æ—Ä–º—ã –≤—Ä—É—á–Ω—É—é", callback_data="setup_manual_norms")
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            with open(setup_image_path, 'rb') as photo:
                bot.send_photo(
                    message.chat.id, 
                    photo, 
                    caption=profile_text, 
                    parse_mode="Markdown", 
                    reply_markup=markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã setup: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            bot.send_message(message.chat.id, profile_text, parse_mode="Markdown", reply_markup=markup)
        
    else:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="setup_profile"),
            InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –Ω–æ—Ä–º—ã –≤—Ä—É—á–Ω—É—é", callback_data="setup_manual_norms")
        )
        
        setup_text = (
            "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
            "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –≤–∞—à–∏—Ö –¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ—Ä–º –ö–ë–ñ–£ —è –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            "1. *–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å* - —è –ø–æ–º–æ–≥—É –≤–∞–º –≤–≤–µ—Å—Ç–∏ –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç, –≤–µ—Å, —Ä–æ—Å—Ç –∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, "
            "–∞ –∑–∞—Ç–µ–º —Ä–∞—Å—Å—á–∏—Ç–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–æ—Ä–º—ã –ö–ë–ñ–£.\n"
            "2. *–ó–∞–¥–∞—Ç—å –Ω–æ—Ä–º—ã –≤—Ä—É—á–Ω—É—é* - –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∞–º–∏ —É–∫–∞–∑–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤.\n\n"
            "_–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º._"
        )
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
            with open(setup_image_path, 'rb') as photo:
                bot.send_photo(
                    message.chat.id, 
                    photo, 
                    caption=setup_text, 
                    parse_mode="Markdown", 
                    reply_markup=markup
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã setup: {str(e)}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            bot.send_message(message.chat.id, setup_text, parse_mode="Markdown", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
@track_command('help')
def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üì± *SnapEat - –ü–æ–º–æ—â—å*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ (–∫–∞–ª–æ—Ä–∏–∏, –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã) "
        "–±–ª—é–¥ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º/–≥–æ–ª–æ—Å–æ–º.\n\n"
        "üîç *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–ª—é–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ –Ω–µ–≥–æ –∏–ª–∏ –∑–∞–ø–∏—à–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ\n"
        "2. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–Ω–∞–ª–∏–∑–∞ (–æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∏—â–µ–≤–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
        "üìã *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        "/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "/setup - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–æ—Ä–º –ö–ë–ñ–£\n\n"
        "üí≥ *–ü–æ–¥–ø–∏—Å–∫–∞:*\n"
        f"- –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: {FREE_REQUESTS_LIMIT} –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        f"- –ü–æ–¥–ø–∏—Å–∫–∞: {SUBSCRIPTION_COST} —Ä—É–±/–º–µ—Å—è—Ü - –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤\n\n"
        "‚ùì *–í–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏"
    )

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã help
    help_image_path = os.path.join(os.path.dirname(__file__), 'static', 'help.jpg')

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        with open(help_image_path, 'rb') as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption=help_text,
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã help: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("setup_"))
def setup_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    if call.data == "setup_profile":
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        bot.delete_message(chat_id, call.message.message_id)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="gender_male"),
            InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_female")
        )
        
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
            reply_markup=markup
        )
    
    elif call.data == "setup_manual_norms":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –Ω–æ—Ä–º
        bot.delete_message(chat_id, call.message.message_id)
        
        manual_norms_text = (
            "*–í–≤–æ–¥ –¥–Ω–µ–≤–Ω—ã—Ö –Ω–æ—Ä–º –ö–ë–ñ–£ –≤—Ä—É—á–Ω—É—é*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–∫–∞–ª–æ—Ä–∏–∏ –±–µ–ª–∫–∏ –∂–∏—Ä—ã —É–≥–ª–µ–≤–æ–¥—ã`\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `2000 150 70 200`\n\n"
            "–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:\n"
            "- 2000 –∫–∫–∞–ª\n"
            "- 150 –≥ –±–µ–ª–∫–∞\n"
            "- 70 –≥ –∂–∏—Ä–æ–≤\n"
            "- 200 –≥ —É–≥–ª–µ–≤–æ–¥–æ–≤"
        )
        
        sent_message = bot.send_message(
            chat_id,
            manual_norms_text,
            parse_mode="Markdown"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ—Ä–º
        bot.register_next_step_handler(sent_message, process_manual_norms)

@bot.callback_query_handler(func=lambda call: call.data.startswith("gender_"))
def gender_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    gender = call.data.split("_")[1]  # 'male' –∏–ª–∏ 'female'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = user_data.get(user_id, {})
    user_data[user_id]['gender'] = gender
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    bot.edit_message_text(
        f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        f"–ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if gender == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):",
        chat_id,
        call.message.message_id,
        parse_mode="Markdown"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    bot.set_state(user_id, BotStates.waiting_for_age, chat_id)

@bot.message_handler(state=BotStates.waiting_for_age)
def process_age(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    age_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    try:
        age = int(age_text)
        if age < 12 or age > 100:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 12 –¥–æ 100 –ª–µ—Ç")
    except ValueError as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 12 –¥–æ 100):")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]['age'] = age
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ)
    try:
        bot.delete_message(chat_id, message.message_id-1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    sent_message = bot.send_message(
        chat_id,
        f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        f"–ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_data[user_id]['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö:",
        parse_mode="Markdown"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞
    bot.set_state(user_id, BotStates.waiting_for_weight, chat_id)

@bot.message_handler(state=BotStates.waiting_for_weight)
def process_weight(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    weight_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    try:
        weight = float(weight_text.replace(',', '.'))
        if weight < 30 or weight > 300:
            raise ValueError("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥")
    except ValueError as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ –æ—Ç 30 –¥–æ 300):")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]['weight'] = weight
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å –æ –≤–µ—Å–µ)
    try:
        bot.delete_message(chat_id, message.message_id-1)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    sent_message = bot.send_message(
        chat_id,
        f"*–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è*\n\n"
        f"–ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_data[user_id]['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data[user_id]['age']} –ª–µ—Ç\n"
        f"–í–µ—Å: {weight} –∫–≥\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö:",
        parse_mode="Markdown"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
    bot.set_state(user_id, BotStates.waiting_for_height, chat_id)

@bot.message_handler(state=BotStates.waiting_for_height)
def process_height(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    height_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
    try:
        height = float(height_text.replace(',', '.'))
        if height < 100 or height > 250:
            raise ValueError("–†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º")
    except ValueError as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 250):")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]['height'] = height
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
    bot.delete_state(user_id, chat_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ (1.2)", callback_data="activity_1.2"),
        InlineKeyboardButton("–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.375)", callback_data="activity_1.375"),
        InlineKeyboardButton("–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.55)", callback_data="activity_1.55"),
        InlineKeyboardButton("–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.725)", callback_data="activity_1.725"),
        InlineKeyboardButton("–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (1.9)", callback_data="activity_1.9")
    )
    
    activity_text = (
        f"–†–æ—Å—Ç: {height} —Å–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n"
        "‚Ä¢ *–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏* - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏\n"
        "‚Ä¢ *–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å* - –ª–µ–≥–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ *–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å* - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ *–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å* - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ *–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å* - —Ç—è–∂–µ–ª–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞, 2 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –¥–µ–Ω—å"
    )
    
    bot.send_message(chat_id, activity_text, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("activity_"))
def activity_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    activity_level = float(call.data.split("_")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]['activity_level'] = activity_level
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–ª—å
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="goal_weight_loss"),
        InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", callback_data="goal_maintenance"),
        InlineKeyboardButton("–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="goal_weight_gain")
    )
    
    goal_text = (
        f"–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activity_level}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:\n\n"
        "‚Ä¢ *–ü–æ—Ö—É–¥–µ–Ω–∏–µ* - —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞, –¥–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π\n"
        "‚Ä¢ *–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞* - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞\n"
        "‚Ä¢ *–ù–∞–±–æ—Ä –º–∞—Å—Å—ã* - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤–µ—Å–∞ –∏ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã"
    )
    
    bot.edit_message_text(
        goal_text,
        chat_id,
        call.message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("goal_"))
def goal_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    goal = call.data.split("_", 1)[1]  # 'weight_loss', 'maintenance' –∏–ª–∏ 'weight_gain'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]['goal'] = goal
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = user_data[user_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã —Å —É—á–µ—Ç–æ–º —Ü–µ–ª–∏
    norms = DatabaseManager.update_user_profile(
        user_id,
        gender=user_profile['gender'],
        age=user_profile['age'],
        weight=user_profile['weight'],
        height=user_profile['height'],
        activity_level=user_profile['activity_level'],
        goal=user_profile['goal']
    )
    
    if norms:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_text = (
            "‚úÖ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!*\n\n"
            f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_profile['gender'] == 'male' else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
            f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {user_profile['age']} –ª–µ—Ç\n"
            f"‚Ä¢ –í–µ—Å: {user_profile['weight']} –∫–≥\n"
            f"‚Ä¢ –†–æ—Å—Ç: {user_profile['height']} —Å–º\n"
            f"‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_profile['activity_level']}\n"
            f"‚Ä¢ –¶–µ–ª—å: {'–ü–æ—Ö—É–¥–µ–Ω–∏–µ' if user_profile['goal'] == 'weight_loss' else '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞' if user_profile['goal'] == 'maintenance' else '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã'}\n\n"
            "*–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –ö–ë–ñ–£:*\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {norms['daily_calories']} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {norms['daily_proteins']} –≥\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {norms['daily_fats']} –≥\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {norms['daily_carbs']} –≥\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–∏—Ö –Ω–æ—Ä–º."
        )
        
        bot.edit_message_text(
            result_text,
            chat_id,
            call.message.message_id,
            parse_mode="Markdown"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        if user_id in user_data:
            del user_data[user_id]
    else:
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            chat_id,
            call.message.message_id
        )

def process_manual_norms(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ—Ä–º –ö–ë–ñ–£"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    try:
        values = message.text.strip().split()
        if len(values) != 4:
            raise ValueError("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ 4 —á–∏—Å–ª–∞")
        
        calories = float(values[0])
        proteins = float(values[1])
        fats = float(values[2])
        carbs = float(values[3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–π
        if calories < 500 or calories > 10000:
            raise ValueError("–ö–∞–ª–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 500 –¥–æ 10000")
        if proteins < 10 or proteins > 500:
            raise ValueError("–ë–µ–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 10 –¥–æ 500")
        if fats < 10 or fats > 500:
            raise ValueError("–ñ–∏—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 10 –¥–æ 500")
        if carbs < 10 or carbs > 1000:
            raise ValueError("–£–≥–ª–µ–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000")
    except ValueError as e:
        bot.send_message(
            chat_id,
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ç—ã—Ä–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–∫–∞–ª–æ—Ä–∏–∏ –±–µ–ª–∫–∏ –∂–∏—Ä—ã —É–≥–ª–µ–≤–æ–¥—ã).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `2000 150 70 200`",
            parse_mode="Markdown"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    norms = DatabaseManager.update_user_profile(
        user_id,
        daily_calories=calories,
        daily_proteins=proteins,
        daily_fats=fats,
        daily_carbs=carbs
    )
    
    if norms:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result_text = (
            "‚úÖ *–í–∞—à–∏ –Ω–æ—Ä–º—ã –ö–ë–ñ–£ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:*\n\n"
            f"‚Ä¢ –ö–∞–ª–æ—Ä–∏–∏: {norms['daily_calories']} –∫–∫–∞–ª\n"
            f"‚Ä¢ –ë–µ–ª–∫–∏: {norms['daily_proteins']} –≥\n"
            f"‚Ä¢ –ñ–∏—Ä—ã: {norms['daily_fats']} –≥\n"
            f"‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: {norms['daily_carbs']} –≥\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç—Ç–∏—Ö –Ω–æ—Ä–º."
        )
        
        bot.send_message(
            chat_id,
            result_text,
            parse_mode="Markdown"
        )
    else:
        bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ—Ä–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def send_payment_invoice(chat_id, title, description, amount, months, user_id=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Telegram Payments API
    
    Args:
        chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        title (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏
        description (str): –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞/—É—Å–ª—É–≥–∏
        amount (float): –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ
        months (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
        user_id (int, optional): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ None, —Ç–æ –±–µ—Ä–µ—Ç—Å—è chat_id)
    """
    try:
        # –ï—Å–ª–∏ user_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id (–¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ –æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç)
        if user_id is None:
            user_id = chat_id
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
        payload = f"subscription_{user_id}_{months}_{int(time.time())}"
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—É–º–º—É –≤ –∫–æ–ø–µ–π–∫–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã –≤–∞–ª—é—Ç—ã)
        price_amount = int(amount * 100)  # –ù–∞–ø—Ä–∏–º–µ—Ä, 100.50 —Ä—É–±–ª–µ–π = 10050 –∫–æ–ø–µ–µ–∫
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Ü–µ–Ω (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π)
        prices = [
            types.LabeledPrice(label=title, amount=price_amount)
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç
        bot.send_invoice(
            chat_id=chat_id,
            title=title,                         # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            description=description,             # –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            invoice_payload=payload,             # –ü–æ–ª–µ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
            provider_token=PAYMENT_PROVIDER_TOKEN,  # –¢–æ–∫–µ–Ω –æ—Ç BotFather
            currency="RUB",                      # –í–∞–ª—é—Ç–∞
            prices=prices,                       # –ú–∞—Å—Å–∏–≤ —Ü–µ–Ω
            start_parameter=f"sub_{months}m"     # –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –≥–ª—É–±–æ–∫–∏—Ö —Å—Å—ã–ª–æ–∫
        )
        logger.info(f"–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞: {str(e)}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription
@bot.message_handler(commands=['subscription'])
@track_command('subscription')
def subscription_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscription"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–µ–ø–µ—Ä—å —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º!)
    is_subscribed = DatabaseManager.check_subscription_status(user_id)
    remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã subscription
    subscription_image_path = os.path.join(os.path.dirname(__file__), 'static', 'subscription.jpg')

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if is_subscribed:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –†–ï–ê–õ–¨–ù–û –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
        from database.db_manager import Session
        session = Session()
        try:
            user = session.query(User).filter_by(telegram_id=user_id).first()

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ê–ö–¢–ò–í–ù–´–ï –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π
            now_msk = datetime.utcnow() + timedelta(hours=3)
            active_subscription = session.query(UserSubscription).filter(
                UserSubscription.user_id == user.id,
                UserSubscription.is_active == True,
                UserSubscription.end_date > now_msk  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û!
            ).order_by(UserSubscription.end_date.desc()).first()

            if active_subscription:
                end_date = active_subscription.end_date
                remaining_days = get_remaining_subscription_days(end_date)

                subscription_text = (
                    "‚úÖ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞*\n\n"
                    f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime(end_date)}\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {remaining_days}\n\n"
                    "–° –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤."
                )

                # –ö–Ω–æ–ø–∫–∏
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
            else:
                # –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                subscription_text = (
                    "‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_requests} –∏–∑ {FREE_REQUESTS_LIMIT}\n\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {SUBSCRIPTION_COST} —Ä—É–±/–º–µ—Å—è—Ü\n"
                    "–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ë–ñ–£."
                )

                # –ö–Ω–æ–ø–∫–∏
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))

        finally:
            session.close()
    else:
        subscription_text = (
            "‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_requests} –∏–∑ {FREE_REQUESTS_LIMIT}\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {SUBSCRIPTION_COST} —Ä—É–±/–º–µ—Å—è—Ü\n"
            "–° –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ë–ñ–£."
        )

        # –ö–Ω–æ–ø–∫–∏
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        with open(subscription_image_path, 'rb') as photo:
            bot.send_photo(
                message.chat.id,
                photo,
                caption=subscription_text,
                parse_mode="Markdown",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã subscription: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        bot.send_message(message.chat.id, subscription_text, parse_mode="Markdown", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@bot.message_handler(commands=['stats'])
@track_command('stats')
def stats_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ª–∏—Å—Ç–∞—Ç—å –¥–∞—Ç—ã"""
    user_id = message.from_user.id
    
    # –í–°–ï–ì–î–ê —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã /stats
    user_stats_dates[user_id] = (datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)).date()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    show_stats_for_date(message.chat.id, user_id, user_stats_dates[user_id])

def show_stats_for_date(chat_id, user_id, selected_date):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É —Å –±–ª—é–¥–∞–º–∏
    
    Args:
        chat_id (int): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selected_date (datetime.date): –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    try:
        daily_stats = DatabaseManager.get_nutrition_stats_for_date(user_id, selected_date)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    date_str = selected_date.strftime("%d.%m.%Y")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º - –í–°–ï–ì–î–ê –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = InlineKeyboardMarkup(row_width=3)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–∞—Ç—ã
    prev_date = selected_date - timedelta(days=1)
    prev_button = InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥. –¥–µ–Ω—å", callback_data=f"stats_prev_{prev_date.strftime('%Y-%m-%d')}")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
    today_date = (datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)).date()
    today_button = InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"stats_today")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã
    next_date = selected_date + timedelta(days=1)
    can_show_next = next_date <= today_date
    next_button = InlineKeyboardButton("–°–ª–µ–¥. –¥–µ–Ω—å ‚û°Ô∏è", callback_data=f"stats_next_{next_date.strftime('%Y-%m-%d')}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã –∫–Ω–æ–ø–∫—É "–°–µ–≥–æ–¥–Ω—è")
    if selected_date == today_date:
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥. –¥–µ–Ω—å"
        markup.add(prev_button, today_button)
    elif can_show_next:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        markup.add(prev_button, today_button, next_button)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –±—É–¥—É—â–∏–π –¥–µ–Ω—å –∏–ª–∏ –¥–µ–Ω—å –ø–µ—Ä–µ–¥ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–º - –Ω–µ—Ç –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥. –¥–µ–Ω—å"
        markup.add(prev_button, today_button)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    if not daily_stats or daily_stats["total"]["count"] == 0:
        # –î–∞–∂–µ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        stats_text = f"üìä –ü–∏—Ç–∞–Ω–∏–µ –∑–∞ {date_str}\n\n–ó–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–∏—Ç–∞–Ω–∏–∏."
        bot.send_message(chat_id, stats_text, parse_mode="Markdown", reply_markup=markup)
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    stats_text = f"üìä –ü–∏—Ç–∞–Ω–∏–µ –∑–∞ {date_str}\n\n"
    
    # –ó–∞–≤—Ç—Ä–∞–∫
    if daily_stats["breakfast"]["count"] > 0:
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        calories = int(daily_stats['breakfast']['calories'])
        proteins = int(daily_stats['breakfast']['proteins'])
        fats = int(daily_stats['breakfast']['fats'])
        carbs = int(daily_stats['breakfast']['carbs'])
        
        stats_text += f"üç≥ –ó–∞–≤—Ç—Ä–∞–∫: {calories} –∫–∫–∞–ª\n"
        stats_text += f"   –ë/–ñ/–£: {proteins}–≥ | {fats}–≥ | {carbs}–≥\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–∞
        for item in daily_stats["breakfast"]["items"]:
            item_calories = int(item['calories'])
            stats_text += f"   ‚Ä¢ {item['name']} ({item_calories} –∫–∫–∞–ª)\n"
        
        stats_text += "\n"
    
    # –û–±–µ–¥
    if daily_stats["lunch"]["count"] > 0:
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        calories = int(daily_stats['lunch']['calories'])
        proteins = int(daily_stats['lunch']['proteins'])
        fats = int(daily_stats['lunch']['fats'])
        carbs = int(daily_stats['lunch']['carbs'])
        
        stats_text += f"üç≤ –û–±–µ–¥: {calories} –∫–∫–∞–ª\n"
        stats_text += f"   –ë/–ñ/–£: {proteins}–≥ | {fats}–≥ | {carbs}–≥\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–∞
        for item in daily_stats["lunch"]["items"]:
            item_calories = int(item['calories'])
            stats_text += f"   ‚Ä¢ {item['name']} ({item_calories} –∫–∫–∞–ª)\n"
        
        stats_text += "\n"
    
    # –£–∂–∏–Ω
    if daily_stats["dinner"]["count"] > 0:
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        calories = int(daily_stats['dinner']['calories'])
        proteins = int(daily_stats['dinner']['proteins'])
        fats = int(daily_stats['dinner']['fats'])
        carbs = int(daily_stats['dinner']['carbs'])
        
        stats_text += f"üçΩ –£–∂–∏–Ω: {calories} –∫–∫–∞–ª\n"
        stats_text += f"   –ë/–ñ/–£: {proteins}–≥ | {fats}–≥ | {carbs}–≥\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–∞
        for item in daily_stats["dinner"]["items"]:
            item_calories = int(item['calories'])
            stats_text += f"   ‚Ä¢ {item['name']} ({item_calories} –∫–∫–∞–ª)\n"
        
        stats_text += "\n"
    
    # –ü–µ—Ä–µ–∫—É—Å—ã
    if daily_stats["snack"]["count"] > 0:
        # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        calories = int(daily_stats['snack']['calories'])
        proteins = int(daily_stats['snack']['proteins'])
        fats = int(daily_stats['snack']['fats'])
        carbs = int(daily_stats['snack']['carbs'])
        
        stats_text += f"üç™ –ü–µ—Ä–µ–∫—É—Å: {calories} –∫–∫–∞–ª\n"
        stats_text += f"   –ë/–ñ/–£: {proteins}–≥ | {fats}–≥ | {carbs}–≥\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–∞
        for item in daily_stats["snack"]["items"]:
            item_calories = int(item['calories'])
            stats_text += f"   ‚Ä¢ {item['name']} ({item_calories} –∫–∫–∞–ª)\n"
        
        stats_text += "\n"
    
    # –ò—Ç–æ–≥–∏ –∑–∞ –¥–µ–Ω—å
    total_calories = int(daily_stats['total']['calories'])
    total_proteins = int(daily_stats['total']['proteins'])
    total_fats = int(daily_stats['total']['fats'])
    total_carbs = int(daily_stats['total']['carbs'])
    
    stats_text += f"üîÑ –ó–∞ –¥–µ–Ω—å: {total_calories} –∫–∫–∞–ª (–ë: {total_proteins}–≥ –ñ: {total_fats}–≥ –£: {total_carbs}–≥)"
    
    bot.send_message(chat_id, stats_text, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("stats_"))
def stats_navigation_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–º–∞–Ω–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if call.data == "stats_today":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        user_stats_dates[user_id] = (datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)).date()
    elif call.data.startswith("stats_prev_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å
        date_str = call.data[11:]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        user_stats_dates[user_id] = datetime.strptime(date_str, "%Y-%m-%d").date()
    elif call.data.startswith("stats_next_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        date_str = call.data[11:]  # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        user_stats_dates[user_id] = datetime.strptime(date_str, "%Y-%m-%d").date()
    
    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ø–∞–º–∞
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    show_stats_for_date(chat_id, user_id, user_stats_dates[user_id])

@bot.callback_query_handler(func=lambda call: call.data == "specify_food")
@track_command('specify_food')
def specify_food_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –±–ª—é–¥–∞"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    user_data[user_id] = {
        'message_id': call.message.message_id,
        'last_photo_id': None  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç ID –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    }
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞
    bot.set_state(user_id, BotStates.waiting_for_food_name, chat_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    bot.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£:",
        chat_id,
        call.message.message_id,
        reply_markup=None
    )

@bot.callback_query_handler(func=lambda call: call.data == "specify_portion")
@track_command('specify_portion')
def specify_portion_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–∫–∞–∑–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if user_id not in user_data:
        user_data[user_id] = {}
    
    # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data[user_id]['message_id'] = call.message.message_id
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏
    bot.set_state(user_id, BotStates.waiting_for_portion_size, chat_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    bot.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏ –≤ –≥—Ä–∞–º–º–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        chat_id,
        call.message.message_id,
        reply_markup=None
    )

@bot.callback_query_handler(func=lambda call: call.data == "subscribe")
@track_command('subscribe_menu')
def subscribe_menu_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="subscribe_1"),
        InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ (-10%)", callback_data="subscribe_3"),
        InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ (-15%)", callback_data="subscribe_6"),
        InlineKeyboardButton("12 –º–µ—Å—è—Ü–µ–≤ (-20%)", callback_data="subscribe_12")
    )
    
    try:
        # –ü—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
            chat_id,
            call.message.message_id,
            reply_markup=markup
        )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ),
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("subscribe_"))
@track_command('subscribe_payment')
def subscription_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
    months = int(call.data.split("_")[1])
    
    # –†–∞—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏
    discount = 0
    if months == 3:
        discount = 0.1  # 10%
    elif months == 6:
        discount = 0.15  # 15%
    elif months == 12:
        discount = 0.2  # 20%
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
    amount = SUBSCRIPTION_COST * months * (1 - discount)
    amount_rounded = round(amount, 2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç–∞
    title = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å."
    description = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ö–ë–ñ–£ –Ω–∞ {months} –º–µ—Å—è—Ü–µ–≤"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –≥–æ—Ç–æ–≤–∏–º —Å—á–µ—Ç
    bot.edit_message_text(
        f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—á–µ—Ç–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {months} –º–µ—Å...",
        chat_id,
        call.message.message_id
    )
    
    # –¢–∞–∫–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–±—Ä–∞–Ω
    metrics_collector.track_command(f'subscribe_{months}m')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—á–µ—Ç —á–µ—Ä–µ–∑ Telegram Payments API
    result = send_payment_invoice(chat_id, title, description, amount_rounded, months, user_id)
    
    if not result:
        bot.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            chat_id,
            call.message.message_id
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è –±–ª—é–¥–∞
@bot.message_handler(state=BotStates.waiting_for_food_name)
def handle_food_name(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    food_name = message.text.strip()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    bot.delete_state(user_id, chat_id)
    
    if food_name.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞']:
        bot.send_message(chat_id, "–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = user_data.get(user_id)
    if not user_info:
        bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = bot.send_message(chat_id, "üîç –£—Ç–æ—á–Ω—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    try:
        # –ò—â–µ–º –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
        nutrition_data = NutritionCalculator.lookup_nutrition(food_name)
        
        # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        if nutrition_data and not nutrition_data.get('estimated', False):
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            result_text = format_nutrition_result(nutrition_data, user_id)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            is_subscribed = DatabaseManager.check_subscription_status(user_id)
            remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
            
            if not is_subscribed:
                result_text += f"\n\n{get_subscription_info(remaining_requests, is_subscribed)}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                session = DatabaseManager.Session()
                try:
                    user = session.query(User).filter_by(telegram_id=user_id).first()
                    if user:
                        food_analysis = session.query(FoodAnalysis).filter_by(
                            user_id=user.id
                        ).order_by(FoodAnalysis.analysis_date.desc()).first()
                        
                        if food_analysis:
                            food_analysis.food_name = food_name
                            food_analysis.calories = nutrition_data['calories']
                            food_analysis.proteins = nutrition_data['proteins']
                            food_analysis.fats = nutrition_data['fats']
                            food_analysis.carbs = nutrition_data['carbs']
                            session.commit()
                finally:
                    session.close()
            except Exception as db_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î: {str(db_error)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞
            
            # –ö–Ω–æ–ø–∫–∏
            markup = None
            if not is_subscribed:
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            bot.edit_message_text(
                result_text,
                chat_id,
                processing_message.message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
        else:
            # –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.edit_message_text(
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª—é–¥–µ '{food_name}'. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ.",
                chat_id,
                processing_message.message_id
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –±–ª—é–¥–∞: {str(e)}")
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–∏ –±–ª—é–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            chat_id,
            processing_message.message_id
        )
    
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏
@bot.message_handler(state=BotStates.waiting_for_portion_size)
def handle_portion_size(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    portion_text = message.text.strip()

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏. user_id: {user_id}, user_data: {user_data.get(user_id)}")
    
    # –û—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ –∫–æ–º–∞–Ω–¥–µ
    if portion_text.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞']:
        bot.delete_state(user_id, chat_id)
        bot.send_message(chat_id, "–£—Ç–æ—á–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if not portion_text.isdigit():
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).")
        return  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∂–¥–µ–º –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
    portion_size = int(portion_text)
    if portion_size <= 0:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏.")
        return  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∂–¥–µ–º –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    bot.delete_state(user_id, chat_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = bot.send_message(chat_id, "üîç –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—é –ö–ë–ñ–£ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –≤ user_data
        if user_id in user_data and 'food_data' in user_data[user_id]:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ user_data
            food_data = user_data[user_id]['food_data']

            if user_id in user_data and 'food_data' in user_data[user_id]:
                logger.info(f"–ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ food_data: {user_data[user_id]['food_data']}")
            else:
                logger.info(f"–î–∞–Ω–Ω—ã–µ food_data –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ message_id")

            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ö–ë–ñ–£
            old_portion = food_data.get('portion_weight', 100)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞
            ratio = portion_size / old_portion
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            new_calories = round(food_data['calories'] * ratio, 1)
            new_proteins = round(food_data['proteins'] * ratio, 1)
            new_fats = round(food_data['fats'] * ratio, 1)
            new_carbs = round(food_data['carbs'] * ratio, 1)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data
            food_data['calories'] = new_calories
            food_data['proteins'] = new_proteins
            food_data['fats'] = new_fats
            food_data['carbs'] = new_carbs
            food_data['portion_weight'] = portion_size
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            nutrition_data = {
                'name': food_data['name'],
                'calories': new_calories,
                'proteins': new_proteins,
                'fats': new_fats,
                'carbs': new_carbs,
                'portion_weight': portion_size,
                'estimated': food_data.get('estimated', False)
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            is_subscribed = DatabaseManager.check_subscription_status(user_id)
            remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_text = format_nutrition_result(nutrition_data, user_id)
            
            if not is_subscribed:
                result_text += f"\n\n{get_subscription_info(remaining_requests, is_subscribed)}"
            
            # –ö–Ω–æ–ø–∫–∏
            markup = InlineKeyboardMarkup(row_width=1)

            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis_key = f"{processing_message.message_id}"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
            if not user_data[user_id].get(f'added_to_stats_{analysis_key}', False):
                markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"add_stats_{user_id}"))
            else:
                result_text += "\n\n‚úÖ –ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            if not is_subscribed:
                markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            bot.edit_message_text(
                result_text,
                chat_id,
                processing_message.message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
            return
        
        # –ó–ê–ü–ê–°–ù–û–ô –í–ê–†–ò–ê–ù–¢ - –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –≤ user_data –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –∏—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–∑ user_data
        message_id = user_data.get(user_id, {}).get('message_id')
        
        if message_id:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                food_message = bot.get_message(chat_id, message_id)
                message_text = food_message.text
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
                name_match = re.search(r'üçΩÔ∏è\s*(.+?)(?:\s*\(|$)', message_text)
                food_name = name_match.group(1).strip() if name_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏
                calories_match = re.search(r'–ö–∞–ª–æ—Ä–∏–∏:\s*(\d+\.?\d*)', message_text)
                current_calories = float(calories_match.group(1)) if calories_match else 0
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ë–ñ–£
                pfc_match = re.search(r'–ë/–ñ/–£:\s*(\d+\.?\d*)\s*–≥\s*\|\s*(\d+\.?\d*)\s*–≥\s*\|\s*(\d+\.?\d*)', message_text)
                if pfc_match:
                    current_proteins = float(pfc_match.group(1))
                    current_fats = float(pfc_match.group(2))
                    current_carbs = float(pfc_match.group(3))
                else:
                    current_proteins = 0
                    current_fats = 0
                    current_carbs = 0
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–µ—Å –ø–æ—Ä—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                weight_match = re.search(r'\((\d+\.?\d*)\s*–≥\)', message_text)
                current_portion = float(weight_match.group(1)) if weight_match else 100
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                ratio = portion_size / current_portion
                new_calories = round(current_calories * ratio, 1)
                new_proteins = round(current_proteins * ratio, 1)
                new_fats = round(current_fats * ratio, 1)
                new_carbs = round(current_carbs * ratio, 1)
                
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –µ–¥–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data
                food_data = {
                    'name': food_name,
                    'calories': new_calories,
                    'proteins': new_proteins,
                    'fats': new_fats,
                    'carbs': new_carbs,
                    'portion_weight': portion_size,
                    'estimated': False
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ user_data
                if user_id not in user_data:
                    user_data[user_id] = {}
                
                user_data[user_id]['food_data'] = food_data
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                is_subscribed = DatabaseManager.check_subscription_status(user_id)
                remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                result_text = format_nutrition_result(food_data, user_id)
                
                if not is_subscribed:
                    result_text += f"\n\n{get_subscription_info(remaining_requests, is_subscribed)}"
                
                # –ö–Ω–æ–ø–∫–∏
                markup = InlineKeyboardMarkup(row_width=1)
                markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"add_stats_{user_id}"))
                
                if not is_subscribed:
                    markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                bot.edit_message_text(
                    result_text,
                    chat_id,
                    processing_message.message_id,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
                return
            except Exception as msg_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(msg_error)}")
                logger.error(traceback.format_exc())
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
        bot.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã —Å–Ω–æ–≤–∞.",
            chat_id,
            processing_message.message_id
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ—Ä—Ü–∏–∏: {str(e)}")
        logger.error(traceback.format_exc())
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ –ö–ë–ñ–£. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            chat_id,
            processing_message.message_id
        )

@bot.message_handler(content_types=['photo'])
def photo_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = message.from_user.id
    update_user_activity(user_id)
    
    # –ü—Ä–∏ –∫–∞–∂–¥–æ–π –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –µ–¥–µ –∏ —Ñ–ª–∞–≥–∏ "–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
    if user_id in user_data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        temp_data = {}
        for key in user_data[user_id]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ food_data –∏ added_to_stats_*
            if key != 'food_data' and not key.startswith('added_to_stats_'):
                temp_data[key] = user_data[user_id][key]
        user_data[user_id] = temp_data
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        is_subscribed = DatabaseManager.check_subscription_status(user_id)
        remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    if not is_subscribed and remaining_requests <= 0:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        
        bot.reply_to(
            message,
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=markup
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = bot.reply_to(message, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    photo_path = None
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ—Ç–æ
        file_info = bot.get_file(message.photo[-1].file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
        photo_path = download_photo(file_url)
        
        if not photo_path:
            bot.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                message.chat.id,
                processing_message.message_id
            )
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AITunnel –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ —Ä–∞—Å—á–µ—Ç–∞ –ö–ë–ñ–£
        nutrition_data = aitunnel_adapter.process_image(image_path=photo_path)
        
        if nutrition_data is None:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ API –≤–µ—Ä–Ω—É–ª None
            bot.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ —Å —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º.",
                message.chat.id,
                processing_message.message_id
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –µ–¥—ã –Ω–∞ —Ñ–æ—Ç–æ
        if not nutrition_data or ('name' in nutrition_data and nutrition_data['name'] == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ') or ('no_food' in nutrition_data and nutrition_data['no_food']) or ('name' in nutrition_data and nutrition_data['name'] == '–ï–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞'):
            # –ï—Å–ª–∏ –µ–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                "üîç –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –µ–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –±–ª—é–¥–æ.\n\n"
                "–î–ª—è –Ω–∞–∏–ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:\n"
                "‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Å–≤–µ—Ä—Ö—É\n"
                "‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ —Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –±–ª—é–¥–æ –∑–∞–Ω–∏–º–∞–ª–æ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –∫–∞–¥—Ä–∞"
            )
            
            bot.edit_message_text(
                message_text,
                message.chat.id,
                processing_message.message_id
            )
            return

        metrics_collector.track_photo_analysis(user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_text = format_nutrition_result(nutrition_data, user_id)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(row_width=1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if user_id not in user_data:
            user_data[user_id] = {}

        user_data[user_id]['food_data'] = {
            'name': nutrition_data['name'],
            'calories': nutrition_data['calories'],
            'proteins': nutrition_data['proteins'],
            'fats': nutrition_data['fats'],
            'carbs': nutrition_data['carbs'],
            'portion_weight': nutrition_data.get('portion_weight', 100),
            'photo_path': photo_path,
            'estimated': nutrition_data.get('estimated', False)
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–≤–æ–π
        markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"add_stats_{user_id}"))

        if nutrition_data.get('estimated', False):
            # –î–ª—è –Ω–µ—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Ç–æ—á–Ω–∏—Ç—å
            markup.add(InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞", callback_data="specify_food"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏
        markup.add(InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –≤–µ—Å –ø–æ—Ä—Ü–∏–∏", callback_data="specify_portion"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        if not is_subscribed:
            remaining_requests -= 1
            result_text += f"\nüîÑ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_requests}\n"
            markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        else:
            result_text += "\n‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.edit_message_text(
            result_text,
            message.chat.id,
            processing_message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {str(e)}")
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            message.chat.id,
            processing_message.message_id
        )
    finally:
        # –ú—ã –Ω–µ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        pass


@bot.message_handler(content_types=['voice'])
@track_user_action('voice_analysis')
def voice_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    update_user_activity(user_id)

    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–æ–≤–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if user_id in user_data:
        temp_data = {}
        for key in user_data[user_id]:
            if key != 'food_data' and not key.startswith('added_to_stats_'):
                temp_data[key] = user_data[user_id][key]
        user_data[user_id] = temp_data

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        is_subscribed = DatabaseManager.check_subscription_status(user_id)
        remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    if not is_subscribed and remaining_requests <= 0:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        bot.reply_to(message, "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                     reply_markup=markup)
        return

    processing_message = bot.reply_to(message, "üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –±–ª—é–¥–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 20 —Å–µ–∫—É–Ω–¥.")

    voice_path = None
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        file_info = bot.get_file(message.voice.file_id)
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_info.file_path}"

        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_path = download_photo(file_url)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

        if not voice_path:
            bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.", message.chat.id,
                                  processing_message.message_id)
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        nutrition_data = aitunnel_adapter.process_voice(voice_path)

        if not nutrition_data or ('no_voice' in nutrition_data and nutrition_data['no_voice']):
            bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ç—á–µ.",
                                  message.chat.id, processing_message.message_id)
            return

        if 'no_food' in nutrition_data and nutrition_data['no_food']:
            bot.edit_message_text("ü§î –í –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –µ–¥–∏—Ç–µ.",
                                  message.chat.id, processing_message.message_id)
            return

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
        metrics_collector.track_voice_analysis(user_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_text = format_nutrition_result(nutrition_data, user_id)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(row_width=1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if user_id not in user_data:
            user_data[user_id] = {}

        user_data[user_id]['food_data'] = {
            'name': nutrition_data['name'],
            'calories': nutrition_data['calories'],
            'proteins': nutrition_data['proteins'],
            'fats': nutrition_data['fats'],
            'carbs': nutrition_data['carbs'],
            'portion_weight': nutrition_data.get('portion_weight', 100),
            'photo_path': None,
            'estimated': nutrition_data.get('estimated', False)
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"add_stats_{user_id}"))

        if nutrition_data.get('estimated', False):
            markup.add(InlineKeyboardButton("–£—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞", callback_data="specify_food"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏
        markup.add(InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –≤–µ—Å –ø–æ—Ä—Ü–∏–∏", callback_data="specify_portion"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        if not is_subscribed:
            remaining_requests -= 1
            result_text += f"\nüîÑ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_requests}\n"
            markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        else:
            result_text += "\n‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.edit_message_text(
            result_text,
            message.chat.id,
            processing_message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: {str(e)}")
        bot.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", message.chat.id,
                              processing_message.message_id)
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if voice_path and os.path.exists(voice_path):
            os.remove(voice_path)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
@bot.callback_query_handler(func=lambda call: call.data.startswith("add_stats_"))
def add_stats_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    try:
        user_id = int(call.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ callback_data
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        if user_id not in user_data or 'food_data' not in user_data[user_id]:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ - —Å–æ—á–µ—Ç–∞–Ω–∏–µ message_id –∏ user_id
        analysis_key = f"{message_id}"
        
        # –ï—Å–ª–∏ —ç—Ç–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
        if user_data[user_id].get(f'added_to_stats_{analysis_key}', False):
            bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç –∞–Ω–∞–ª–∏–∑ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª—é–¥–∞
        food_data = user_data[user_id]['food_data']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        analysis_time = datetime.utcnow() + timedelta(hours=TIMEZONE_OFFSET)
        analysis_id = DatabaseManager.save_food_analysis(
            user_id,
            food_data['name'],
            food_data['calories'],
            food_data['proteins'],
            food_data['fats'],
            food_data['carbs'],
            food_data.get('photo_path'),
            food_data.get('portion_weight', 100),
            analysis_time
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if analysis_id:
            user_data[user_id]['analysis_id'] = analysis_id
            user_data[user_id][f'added_to_stats_{analysis_key}'] = True
            
            # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.answer_callback_query(call.id, "‚úÖ –ë–ª—é–¥–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            markup = InlineKeyboardMarkup(row_width=1)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É
            original_markup = call.message.reply_markup.to_dict() if call.message.reply_markup else {"inline_keyboard": []}
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏, –∫—Ä–æ–º–µ "–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            for row in original_markup.get("inline_keyboard", []):
                for button in row:
                    if "–î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" not in button.get("text", ""):
                        markup.add(types.InlineKeyboardButton(
                            text=button.get("text", ""),
                            callback_data=button.get("callback_data", "")
                        ))
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            original_text = call.message.text
            
            if "–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" not in original_text:
                updated_text = original_text + "\n\n‚úÖ –ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"
            else:
                updated_text = original_text
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(
                updated_text,
                chat_id,
                call.message.message_id,
                parse_mode="Markdown",
                reply_markup=markup if len(markup.keyboard) > 0 else None
            )
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")
        logger.error(traceback.format_exc())
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout_query(pre_checkout_query):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞
    Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 
    –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã, –Ω–æ –¥–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    """
    try:
        # –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞, –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.
        # –ï—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º ok=True
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        logger.info(f"Pre-checkout –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ: {pre_checkout_query.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ pre_checkout_query: {str(e)}")
        bot.answer_pre_checkout_query(
            pre_checkout_query.id, 
            ok=False, 
            error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = message.successful_payment
        user_id = message.from_user.id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload (–Ω–∞—à —Ñ–æ—Ä–º–∞—Ç: subscription_[user_id]_[months]_[timestamp])
        payload_parts = payment_info.invoice_payload.split('_')
        months = int(payload_parts[2]) if len(payload_parts) > 2 else 1
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ÆKassa
        transaction_id = payment_info.provider_payment_charge_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        result = DatabaseManager.add_subscription(user_id, months, transaction_id)
        
        if result:
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            metrics_collector.track_subscription_purchase()
            metrics_collector.save_metrics()  # –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
            success_text = (
                f"‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {months} –º–µ—Å.\n"
                f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤."
            )
            
            bot.send_message(
                message.chat.id,
                success_text,
                parse_mode="Markdown"
            )
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {months} –º–µ—Å.")
        else:
            bot.send_message(
                message.chat.id,
                "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
        bot.send_message(
            message.chat.id,
            "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

@bot.message_handler(commands=['fix_subscriptions'])
def fix_subscriptions_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        cleanup_expired_subscriptions()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        with get_db_session() as session:
            now_msk = datetime.utcnow() + timedelta(hours=3)

            total_subs = session.query(UserSubscription).count()
            active_subs = session.query(UserSubscription).filter_by(is_active=True).count()

            really_active = session.query(UserSubscription).filter(
                UserSubscription.is_active == True,
                UserSubscription.end_date > now_msk
            ).count()

        report = f"""üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–û–ö

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {total_subs}
- –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–µ: {active_subs}  
- –†–µ–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–µ: {really_active}
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {active_subs - really_active}

‚úÖ –í—Å–µ –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã"""

        bot.reply_to(message, report)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['test_cleanup'])
def test_cleanup_command(message):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    user_id = message.from_user.id

    if user_id not in ADMIN_IDS:
        return

    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if notification_cache:
            cache_info = "\n".join([
                f"User {uid}: {datetime.fromtimestamp(timestamp).strftime('%H:%M:%S')}"
                for uid, timestamp in list(notification_cache.items())[:10]  # –ü–µ—Ä–≤—ã–µ 10
            ])
            text = f"üì® –ö—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ({len(notification_cache)} –∑–∞–ø–∏—Å–µ–π):\n{cache_info}"
        else:
            text = "üì® –ö—ç—à —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç"

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
        with get_db_session() as session:
            now_msk = datetime.utcnow() + timedelta(hours=3)

            total_expired = session.query(UserSubscription).filter(
                UserSubscription.end_date <= now_msk
            ).count()

            active_expired = session.query(UserSubscription).filter(
                UserSubscription.is_active == True,
                UserSubscription.end_date <= now_msk
            ).count()

            text += f"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            text += f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ç–µ–∫—à–∏—Ö: {total_expired}\n"
            text += f"‚Ä¢ –í—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_expired}\n"

            if active_expired > 0:
                text += f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {active_expired} –±–∞–≥–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫!"

        bot.reply_to(message, text)

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def text_handler(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –∞–Ω–∞–ª–∏–∑ –µ–¥—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —á–µ—Ä–µ–∑ GPT-4"""
    user_id = message.from_user.id
    update_user_activity(user_id)
    text = message.text.strip()

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text.startswith('/'):
        help_text = (
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ–¥—ã, –æ–ø–∏—à–∏—Ç–µ –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
            "/subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
            "/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "/setup - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–æ—Ä–º –ö–ë–ñ–£"
        )
        bot.reply_to(message, help_text)
        return

    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –Ω–æ–≤–æ–º —Ç–µ–∫—Å—Ç–µ
    if user_id in user_data:
        temp_data = {}
        for key in user_data[user_id]:
            if key != 'food_data' and not key.startswith('added_to_stats_'):
                temp_data[key] = user_data[user_id][key]
        user_data[user_id] = temp_data

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        is_subscribed = DatabaseManager.check_subscription_status(user_id)
        remaining_requests = DatabaseManager.get_remaining_free_requests(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    if not is_subscribed and remaining_requests <= 0:
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))

        bot.reply_to(
            message,
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=markup
        )
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = bot.reply_to(message, "üìù –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ –ò–ò... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT-4 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
        nutrition_data = aitunnel_adapter.process_text(text)

        if not nutrition_data or ('no_food' in nutrition_data and nutrition_data['no_food']):
            bot.edit_message_text(
                f"ü§î –í —Ç–µ–∫—Å—Ç–µ '{text}' –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –µ–¥—ã. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –±–ª—é–¥–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ —Å —Ä–∏—Å–æ–º' –∏–ª–∏ '–±–æ—Ä—â —Å —Ö–ª–µ–±–æ–º'.",
                message.chat.id,
                processing_message.message_id
            )
            return

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫—É
        metrics_collector.track_text_analysis(user_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_text = format_nutrition_result(nutrition_data, user_id)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = InlineKeyboardMarkup(row_width=1)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if user_id not in user_data:
            user_data[user_id] = {}

        user_data[user_id]['food_data'] = {
            'name': nutrition_data['name'],
            'calories': nutrition_data['calories'],
            'proteins': nutrition_data['proteins'],
            'fats': nutrition_data['fats'],
            'carbs': nutrition_data['carbs'],
            'portion_weight': nutrition_data.get('portion_weight', 100),
            'photo_path': None,
            'estimated': nutrition_data.get('estimated', False)
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        markup.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data=f"add_stats_{user_id}"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤–µ—Å–∞ –ø–æ—Ä—Ü–∏–∏
        markup.add(InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –≤–µ—Å –ø–æ—Ä—Ü–∏–∏", callback_data="specify_portion"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        if not is_subscribed:
            remaining_requests -= 1
            result_text += f"\nüîÑ –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining_requests}\n"
            markup.add(InlineKeyboardButton("–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe"))
        else:
            result_text += "\n‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.edit_message_text(
            result_text,
            message.chat.id,
            processing_message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        bot.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            message.chat.id,
            processing_message.message_id
        )

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
bot.add_custom_filter(custom_filters.StateFilter(bot))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
def run_polling():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞...")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏
    cleanup_thread = threading.Thread(target=cleanup_user_data, daemon=True)
    cleanup_thread.start()
    logger.info("üßπ –ó–∞–ø—É—â–µ–Ω —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –æ—á–∏—Å—Ç–∫–∏ user_data")

    bot.remove_webhook()
    bot.infinity_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    run_polling()      